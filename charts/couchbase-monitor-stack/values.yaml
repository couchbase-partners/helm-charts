# specify cluster name to monitor.
# default behavior to use existing cluster 
clusterName:

# specify bucket to display in grafana.
# default behavior to use existing bucket 
bucketName:

kube-prometheus-stack:
  fullnameOverride: couchbase-monitor-stack
  # grafana config
  grafana:
    # only loading couchbase dashboard here
    defaultDashboardsEnabled: false
    adminPassword: admin
  # prometheus config
  prometheus:
    additionalServiceMonitors:
      - name: couchbase-prometheus
        endpoints:
          - port: metrics
            interval: 5s
            basicAuth:
              password:
                name: <secret-name>
                key: password
              username:
                name: <secret-name>
                key: username
        # arbitrary namespaces to match against
        # change when installing unlisted namespace
        namespaceSelector:
          matchNames:
            - default
            - monitoring
            - metrics
        selector:
          matchLabels:
            app.couchbase.com/name: couchbase
        fallbackScrapeProtocol: PrometheusText0.0.4

  # disable some exporters we don't need
  nodeExporter:
    enabled: false
  coreDns:
    enabled: false
  kubeApiServer:
    enabled: false
  kubeControllerManager:
    enabled: false
  kubeEtcd:
    enabled: false
  kubeProxy:
    enabled: false
  kubeScheduler:
    enabled: false
  kubeStateMetrics:
    enabled: false
  kubelet:
    enabled: false
  nodeExporter:
    enabled: false

prometheus-adapter:
  prometheus:
    url: http://couchbase-monitor-stack-prometheus.default.svc
    port: 9090
    path: ""
  rules:
    default: true 
# Uncomment to install metric-server
# NOTE: Setting a value for rules.resource will also deploy the resource metrics API service,
#       providing the same functionality as metric-server.
#       As such it is not possible to deploy them both in the same cluster.
#	resource:
#		cpu:
#			containerQuery: sum(rate(container_cpu_usage_seconds_total{<<.LabelMatchers>>}[3m])) by (<<.GroupBy>>)
#			nodeQuery: sum(rate(container_cpu_usage_seconds_total{<<.LabelMatchers>>, id='/'}[3m])) by (<<.GroupBy>>)
#			resources:
#				overrides:
#					instance:
#						resource: node
#					namespace:
#						resource: namespace
#					pod:
#						resource: pod
#			containerLabel: container
#		memory:
#			containerQuery: sum(container_memory_working_set_bytes{<<.LabelMatchers>>}) by (<<.GroupBy>>)
#			nodeQuery: sum(container_memory_working_set_bytes{<<.LabelMatchers>>,id='/'}) by (<<.GroupBy>>)
#			resources:
#				overrides:
#					instance:
#						resource: node
#					namespace:
#						resource: namespace
#					pod:
#						resource: pod
#			containerLabel: container
#		window: 3m
